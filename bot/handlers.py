# bot/handlers.py

from telegram.ext import CommandHandler, Application
from telegram import Update
from telegram.ext import ContextTypes
from strategy.advanced_strategy import analyze_market  # –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

# –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
PAIRS = [
    "BTC/USDT", "ETH/USDT", "SOL/USDT", "XRP/USDT", "SUI/USDT",
    "APT/USDT", "ARB/USDT", "OP/USDT", "STX/USDT", "TIA/USDT"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /check –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å\n/check ‚Äî –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥")

    try:
        results = analyze_market(PAIRS)
        if not results:
            await update.message.reply_text("‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for res in results:
            text = f"üîπ *{res['symbol']}*\n–°–∏–≥–Ω–∞–ª: *{res['signal']}*"
            if res['reasons']:
                text += "\n–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join(f"- {r}" for r in res['reasons'])
            await update.message.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

def setup_handlers(application: Application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check_command))