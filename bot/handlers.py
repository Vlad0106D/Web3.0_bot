from telegram import Update
from telegram.ext import ContextTypes
from strategy.base_strategy import analyze_market  # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from telegram.ext import Application, CommandHandler

# üîπ –°–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ø-10)
PAIRS = [
    "BTC/USDT", "ETH/USDT", "SOL/USDT", "XRP/USDT", "SUI/USDT",
    "APT/USDT", "ARB/USDT", "OP/USDT", "STX/USDT", "TIA/USDT"
]

# üîç –ö–æ–º–∞–Ω–¥–∞ /check ‚Äî –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥")

    try:
        results = analyze_market(PAIRS)
        for res in results:
            text = f"üîπ *{res['symbol']}*\n–°–∏–≥–Ω–∞–ª: *{res['signal']}*"
            if res['reasons']:
                text += "\n–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join(f"- {r}" for r in res['reasons'])
            await update.message.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è main.py
def setup_handlers(application: Application):
    application.add_handler(CommandHandler("check", check_command))